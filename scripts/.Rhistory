theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)))
ggsave(filename = paste0(plots, "f0_vowel_size_raw_speaker.pdf"),
plot = last_plot(),
width = 10, height = 8)
print(f0_vowel +
facet_wrap(~mover) +
theme_minimal())
print(f0_vowel +
facet_wrap(~mover) +
theme_bw())
print(f0_vowel_size_raw +
facet_wrap(~mover) +
theme_bw())
print(f0_vowel_size_raw +
facet_wrap(~mover) +
theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)))
ggsave(filename = paste0(plots, "f0_vowel_size_raw_mover.pdf"),
plot = last_plot(),
width = 8, height = 5)
# Extracting posterior samples
post_maxH1_headPos <- mdl_maxH1_headPos %>%
gather_draws(b_vowel_s, b_can_size_s, b_head_pos, b_h_pos, b_height)
# Plotting intervals with densities
postplot_maxH1_headPos <-
ggplot(post_maxH1_headPos,
aes(x = .value, y = .variable)) +
stat_halfeye(.width = 0.95, fill = colorBlindBlack8[2], alpha = 0.7, size = 2) +
geom_segment(x = 0, xend = 0, y = -Inf, yend = Inf,
linetype = "dashed", color = "grey", size = 1) +
theme_bw() +
labs(x = "Posterior density", y = "Variable") +
scale_y_discrete(labels = c("Can size", "Head position", "Height", "Horizontal pos.", "Vowel")) + # Must be in alphabetical order
scale_x_continuous(limits = c(-0.12, 0.02))
postplot_maxH1_headPos
print(postplot_maxH1_headPos +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)))
print(postplot_maxH1_headPos +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold")))
ggsave(filename = paste0(plots, "post_maxH1_headPos.pdf"),
plot = last_plot(),
width = 10, height = 8)
# Plotting intervals with densities
postplot_maxH1_headPos <-
ggplot(post_maxH1_headPos,
aes(x = .value, y = .variable)) +
stat_halfeye(.width = 0.95, fill = colorBlindBlack8[2], alpha = 0.7, size = 2) +
geom_segment(x = 0, xend = 0, y = -Inf, yend = Inf,
linetype = "dashed", color = "grey", size = 1) +
theme_bw() +
labs(x = "Posterior density", y = "Variable") +
#scale_y_discrete(labels = c("Can size", "Head position", "Height", "Horizontal pos.", "Vowel")) + # Must be in alphabetical order
scale_x_continuous(limits = c(-0.12, 0.02))
print(postplot_maxH1_headPos +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold")))
# Plotting intervals with densities
postplot_maxH1_headPos <-
ggplot(post_maxH1_headPos,
aes(x = .value, y = .variable)) +
stat_halfeye(.width = 0.95, fill = colorBlindBlack8[2], alpha = 0.7, size = 2) +
geom_segment(x = 0, xend = 0, y = -Inf, yend = Inf,
linetype = "dashed", color = "grey", size = 1) +
theme_bw() +
labs(x = "Posterior density", y = "Variable") +
scale_y_discrete(labels = c("Can size", "Head position", "Height", "Horizontal pos.", "Vowel")) + # Must be in alphabetical order
scale_x_continuous(limits = c(-0.12, 0.02))
print(postplot_maxH1_headPos +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold")))
# Plotting intervals with densities
postplot_maxH1_headPos <-
ggplot(post_maxH1_headPos,
aes(x = .value, y = .variable)) +
stat_halfeye(.width = 0.95, fill = colorBlindBlack8[2], alpha = 0.7, size = 2) +
geom_segment(x = 0, xend = 0, y = -Inf, yend = Inf,
linetype = "dashed", color = "grey", size = 1) +
theme_bw() +
labs(x = "Posterior density", y = "Variable") +
scale_y_discrete(labels = c("Can size", "Horizontal pos.", "Head position", "Height", "Vowel")) + # Must be in alphabetical order
scale_x_continuous(limits = c(-0.12, 0.02))
print(postplot_maxH1_headPos +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold")))
ggsave(filename = paste0(plots, "post_maxH1_headPos.pdf"),
plot = last_plot(),
width = 10, height = 8)
ggplot(can, aes(x = v_pos, y = f0_mean, color = factor(vowel))) +
geom_point(alpha = 0.5) +
stat_smooth(method = "lm", se = TRUE) +
labs(color = "Vowel", x = "Vertical Position", y = "f0 Mean (Hz)") +
theme_minimal() +
scale_color_manual(values = colorBlindBlack8)
ggplot(can, aes(x = head_pos, y = f0_mean, color = factor(vowel))) +
geom_point(alpha = 0.5) +
stat_smooth(method = "lm", se = TRUE) +
labs(color = "Vowel", x = "Vertical Position", y = "f0 Mean (Hz)") +
theme_minimal() +
scale_color_manual(values = colorBlindBlack8)
f0_vertical <- ggplot(can,
aes(y = f0_mean_z,
x = v_pos,
color = can_size)) +
stat_summary(geom = 'line',
fun = mean,
position = position_dodge(width = 0.5),
size = 2) +
stat_summary(position = position_dodge(width = 0.5),
size = 1 ) +
scale_color_manual(values=colorBlindBlack8) +
labs(x = "Vertical Position",
y = "F0 (z-normalized)",
color = "Can size") +
theme_bw()+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 16,
face="bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
f0_vertical
ggplot(can, aes(x = v_pos, y = f0_mean, color = factor(vowel))) +
geom_point(alpha = 0.5) +
stat_smooth(method = "lm", se = TRUE) +
labs(color = "Vowel", x = "Vertical Position", y = "f0 Mean (Hz)") +
theme_minimal() +
scale_color_manual(values = colorBlindBlack8)
f0_vertical <- ggplot(can,
aes(y = f0_mean_z,
x = v_pos,
color = can_size)) +
stat_summary(geom = 'line',
fun = mean,
position = position_dodge(width = 0.5),
size = 2) +
stat_summary(position = position_dodge(width = 0.5),
size = 1 ) +
scale_color_manual(values=colorBlindBlack8) +
labs(x = "Vertical Position",
y = "F0 (z-normalized)",
color = "Can size") +
theme_bw()+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 16,
face="bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
f0_vertical
f0_vertical <- ggplot(can,
aes(y = f0_mean_z,
x = v_pos,
color = can_size)) +
stat_summary(geom = 'line',
fun = mean,
position = position_dodge(width = 0.5),
size = 2) +
stat_summary(position = position_dodge(width = 0.5),
size = 1 ) +
scale_color_manual(values=colorBlindBlack8) +
labs(x = "Vertical Position",
y = "F0 (z-normalized)",
color = "Can size") +
theme_bw()+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face="bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
f0_vertical
f0_vertical <- ggplot(can,
aes(y = f0_mean_z,
x = v_pos,
color = can_size)) +
stat_summary(geom = 'line',
fun = mean,
position = position_dodge(width = 0.5),
size = 2) +
stat_summary(position = position_dodge(width = 0.5),
size = 1 ) +
scale_color_manual(values=colorBlindBlack8) +
labs(x = "Vertical Position",
y = "f0 mean (z-normalized)",
color = "Can size") +
theme_bw()+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face="bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
f0_vertical
ggsave(plot = f0_vertical,
filename = paste0(plots, "f0-vertical.pdf"),
width = 7, height = 4)
ggsave(plot = f0_vertical,
filename = paste0(plots, "f0-vertical.pdf"),
width = 8, height = 5)
f0_vPos_vow_z <- ggplot(can,
aes(x = v_pos,
y = f0_mean_z,
color = factor(vowel))) +
geom_point(alpha = 0.4) +
stat_smooth(size = 1,
method = "lm",
se = TRUE) +
labs(color = "Vowel", x = "Vertical Position", y = "f0 Mean (z-normalized)") +
theme_minimal() +
scale_color_manual(values = colorBlindBlack8)
print(f0_vPos_vow_z + theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)))
ggsave(filename = paste0(plots, "f0_vPos_vow_z.pdf"),
plot = last_plot(),
width = 8, height = 5)
f0_vPos_vow_raw <- ggplot(can,
aes(x = v_pos,
y = f0_mean,
color = factor(vowel))) +
geom_point(alpha = 0.4) +
stat_smooth(size = 1,
method = "lm",
se = TRUE) +
labs(color = "Vowel", x = "Vertical Position", y = "f0 Mean (Hz)") +
theme_minimal() +
scale_color_manual(values = colorBlindBlack8)
print(f0_vPos_vow_raw + theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)))
ggsave(filename = paste0(plots, "f0_vPos_vow_raw.pdf"),
plot = last_plot(),
width = 8, height = 5)
f0_vPos_size_z <- ggplot(can,
aes(x = v_pos,
y = f0_mean_z,
color = can_size)) +
geom_point(alpha = 0.4) +
geom_smooth(size = 1,
method = lm,
se = T) +
scale_color_manual(values=colorBlindBlack8) +
labs(x = "Vertical Position",
y = "f0 Mean (z-normalized)",
color = "Can Size")
print(f0_vPos_size_z + theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)))
# ggsave(filename = paste0(plots, "f0_vPos_size_z.pdf"),
#        plot = last_plot(),
#        width = 8, height = 5)
ggsave(filename = paste0(plots, "f0_vPos_size_z.pdf"),
plot = last_plot(),
width = 8, height = 5)
f0_vPos_size_raw <- ggplot(can,
aes(x = v_pos,
y = f0_mean,
color = can_size)) +
geom_point(alpha = 0.4) +
geom_smooth(size = 1,
method = lm,
se = T) +
scale_color_manual(values=colorBlindBlack8) +
labs(x = "Head position (cm)",
y = "f0 mean (Hz)",
color = "Can size")
print(f0_vPos_size_raw + theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)))
ggsave(filename = paste0(plots, "f0_vPos_size_raw.pdf"),
plot = last_plot(),
width = 8, height = 5)
f0_vPos_size_raw <- ggplot(can,
aes(x = v_pos,
y = f0_mean,
color = can_size)) +
geom_point(alpha = 0.4) +
geom_smooth(size = 1,
method = lm,
se = T) +
scale_color_manual(values=colorBlindBlack8) +
labs(x = "Vertical Position",
y = "f0 Mean (Hz)",
color = "Can Size")
print(f0_vPos_size_raw + theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)))
ggsave(filename = paste0(plots, "f0_vPos_size_raw.pdf"),
plot = last_plot(),
width = 8, height = 5)
f0_vPos_size_raw <- ggplot(can,
aes(x = v_pos,
y = f0_mean_z,
color = mover)) +
geom_point(alpha = 0.4) +
geom_smooth(size = 1,
method = lm,
se = T) +
scale_color_manual(values=colorBlindBlack8) +
labs(x = "Vertical Position",
y = "f0 Mean (z-normalized)",
color = "Mover")
print(f0_vPos_size_raw + theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)))
ggsave(filename = paste0(plots, "f0_vPos_size_raw.pdf"),
plot = last_plot(),
width = 8, height = 5)
f0_vPos_mover_raw <- ggplot(can,
aes(x = v_pos,
y = f0_mean,
color = mover)) +
geom_point(alpha = 0.4) +
geom_smooth(size = 1,
method = lm,
se = T) +
scale_color_manual(values=colorBlindBlack8) +
labs(x = "Vertical Position",
y = "f0 Mean (Hz)",
color = "Mover")
print(f0_vPos_mover_raw + theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)))
ggsave(filename = paste0(plots, "f0_vPos_mover_raw.pdf"),
plot = last_plot(),
width = 8, height = 5)
# Extracting posterior samples
post_maxH1_vPos <- mdl_maxH1_vPos %>%
gather_draws(b_vowel_s, b_can_size_s, b_v_pos, b_h_pos, b_height)
# Plotting intervals with densities
postplot_maxH1_vPos <-
ggplot(post_maxH1_vPos,
aes(x = .value, y = .variable)) +
stat_halfeye(.width = 0.95, fill = colorBlindBlack8[2], alpha = 0.7, size = 2) +
geom_segment(x = 0, xend = 0, y = -Inf, yend = Inf,
linetype = "dashed", color = "grey", size = 1) +
theme_bw() +
labs(x = "Posterior density", y = "Variable") +
scale_y_discrete(labels = c("Can size", "Height", "Horizontal pos.", "Vertical pos.", "Vowel")) + # Must be in alphabetical order
scale_x_continuous(limits = c(-0.13, 0.01))
print(post_maxH1_vPos +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold")))
# Plotting intervals with densities
postplot_maxH1_vPos <-
ggplot(post_maxH1_vPos,
aes(x = .value, y = .variable)) +
stat_halfeye(.width = 0.95, fill = colorBlindBlack8[2], alpha = 0.7, size = 2) +
geom_segment(x = 0, xend = 0, y = -Inf, yend = Inf,
linetype = "dashed", color = "grey", size = 1) +
theme_bw() +
labs(x = "Posterior density", y = "Variable") +
scale_y_discrete(labels = c("Can size", "Height", "Horizontal pos.", "Vertical pos.", "Vowel")) + # Must be in alphabetical order
scale_x_continuous(limits = c(-0.13, 0.01))
post_maxH1_vPos
# Plotting intervals with densities
postplot_maxH1_vPos <-
ggplot(post_maxH1_vPos,
aes(x = .value, y = .variable)) +
stat_halfeye(.width = 0.95, fill = colorBlindBlack8[2], alpha = 0.7, size = 2) +
geom_segment(x = 0, xend = 0, y = -Inf, yend = Inf,
linetype = "dashed", color = "grey", size = 1) +
theme_bw() +
labs(x = "Posterior density", y = "Variable") +
scale_y_discrete(labels = c("Can size", "Height", "Horizontal pos.", "Vertical pos.", "Vowel")) + # Must be in alphabetical order
scale_x_continuous(limits = c(-0.13, 0.01))
# Plotting intervals with densities
postplot_maxH1_vPos <-
ggplot(post_maxH1_vPos,
aes(x = .value, y = .variable)) +
stat_halfeye(.width = 0.95, fill = colorBlindBlack8[2], alpha = 0.7, size = 2) +
geom_segment(x = 0, xend = 0, y = -Inf, yend = Inf,
linetype = "dashed", color = "grey", size = 1) +
theme_bw() +
labs(x = "Posterior density", y = "Variable") +
#scale_y_discrete(labels = c("Can size", "Height", "Horizontal pos.", "Vertical pos.", "Vowel")) + # Must be in alphabetical order
scale_x_continuous(limits = c(-0.13, 0.01))
print(postplot_maxH1_vPos +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold")))
# Plotting intervals with densities
postplot_maxH1_vPos <-
ggplot(post_maxH1_vPos,
aes(x = .value, y = .variable)) +
stat_halfeye(.width = 0.95, fill = colorBlindBlack8[2], alpha = 0.7, size = 2) +
geom_segment(x = 0, xend = 0, y = -Inf, yend = Inf,
linetype = "dashed", color = "grey", size = 1) +
theme_bw() +
labs(x = "Posterior density", y = "Variable") +
scale_y_discrete(labels = c("Can size", "Horizontal pos.", "Height", "Vertical pos.", "Vowel")) + # Must be in alphabetical order
scale_x_continuous(limits = c(-0.13, 0.01))
print(postplot_maxH1_vPos +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14,
face = "bold")))
ggsave(filename = paste0(plots, "postplot_maxH1_vPos.pdf"),
plot = last_plot(),
width = 10, height = 8)
lip <- ggplot(can,
aes(y = lip_dist,
x = vowel,
fill = can_size)) +
geom_violin(position = position_dodge(1),
trim = FALSE,
alpha = 0.4) +
# adds median and quartile:
geom_boxplot(width = 0.1,
position = position_dodge((1)),
alpha = 0.6,
outlier.shape = NA, # Hides outliers.
notch = T, #  Notches are used to compare groups; if the notches of two boxes do not overlap, this suggests that the medians are significantly different.
coef = 0) + # Length of the whiskers as multiple of IQR. Defaults to 1.5.
scale_fill_manual(values = colorBlindBlack8) +
labs(x = "Vowel",
y = "Lip opening",
fill = "Can size") +
theme_bw()+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
lip
lip_vowel_size <- ggplot(can,
aes(y = lip_dist,
x = vowel,
fill = can_size)) +
geom_violin(position = position_dodge(1),
trim = FALSE,
alpha = 0.4) +
# adds median and quartile:
geom_boxplot(width = 0.1,
position = position_dodge((1)),
alpha = 0.6,
outlier.shape = NA, # Hides outliers.
notch = T, #  Notches are used to compare groups; if the notches of two boxes do not overlap, this suggests that the medians are significantly different.
coef = 0) + # Length of the whiskers as multiple of IQR. Defaults to 1.5.
scale_fill_manual(values = colorBlindBlack8) +
labs(x = "Vowel",
y = "Lip opening",
fill = "Can size") +
theme_bw()+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
lip_vowel_size
ggsave(plot = lip,
filename = paste0(plots, "lip_vowel_size.pdf"),
width = 8, height = 5)
lip_vowel_size <- ggplot(can,
aes(y = lip_dist,
x = vowel,
fill = can_size)) +
geom_violin(position = position_dodge(1),
trim = FALSE,
alpha = 0.4) +
# adds median and quartile:
geom_boxplot(width = 0.1,
position = position_dodge((1)),
alpha = 0.6,
outlier.shape = NA, # Hides outliers.
notch = T, #  Notches are used to compare groups; if the notches of two boxes do not overlap, this suggests that the medians are significantly different.
coef = 0) + # Length of the whiskers as multiple of IQR. Defaults to 1.5.
scale_fill_manual(values = colorBlindBlack8) +
labs(x = "Vowel",
y = "Lip opening",
fill = "Can size") +
theme_bw()+
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
lip_vowel_size
ggsave(plot = lip,
filename = paste0(plots, "lip_vowel_size.pdf"),
width = 8, height = 5)
